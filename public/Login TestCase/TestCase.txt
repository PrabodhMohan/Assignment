import React from 'react';
import { render, screen } from '@testing-library/react';
import LoginPage from '../../../src/components/LoginPage';
import { fireEvent, screen, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import userEvent from "@testing-library/user-event";
const mockedOnChange = jest.fn();

it("should show error message when all the fields are not entered" ,async() => {
   render(<LoginPage />
   const buttonElement = screen.getByRole("button");
   await userEvent.click(buttonElement);
   const alertElement = screen.getByRole("alert");
   expect (alertElement).tobeInTheDocument();  
});

describe('LoginPage', () => {
  it('should render Login Page with labels', () => {
    render(<LoginPage />);
    expect(screen.getByRole('heading')).toHaveTextContent('User ID');
    expect(screen.getByRole('heading')).toHaveTextContent('Password');
  });

  test("input should be empty initially", async () => {
    render(<LoginPage title="" onChangeHadler={mockedOnChange} />);
    const input = screen.getByRole("textbox", { name: /userName/i });
    expect(input).toHaveValue("");
  });

  it('should render Login Page with labels', () => {
    render(<LoginPage />);
    expect(screen.getByRole('heading')).toHaveTextContent('User ID');
    expect(screen.getByRole('heading')).toHaveTextContent('Password');
  });

   test("input should update by typed text", async () => {
       renderComponent("LoginPage");
       const input = await screen.findByRole("textbox", { name: /userName/i });
       await waitFor(() => expect(input).toHaveValue("userName"));
       userEvent.clear(input);
       expect(input).toHaveValue(""); // error appears here indicating that value was not cleared
       // userEvent.type(input, "su"); 
       // await waitFor(() => expect(input).toHaveValue("su"));
   });

    test("callback function is called on user interactions", async () => {
        renderComponent("LoginPage");
        const input = await screen.findByRole("textbox", { name: /userName/i });
        userEvent.type(input, "userName");
        expect(mockedOnChange).toHaveBeenCalledWith("userName");
    });

   it("should show error message when all the fields are not entered" ,async() => {
   	render(<LoginPage />
   	const buttonElement = screen.getByRole("button");
   	await userEvent.click(buttonElement);
   	const alertElement = screen.getByRole("alert");
   	expect (alertElement).tobeInTheDocument();  
   });
});
