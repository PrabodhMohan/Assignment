 import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  IconPlus,
  IconEdit,
  IconTrash,
  IconCopy,
  IconDownload,
} from '@americanexpress/dls-icons';
import {
  DataTableV2,
  DataTableRowV2,
  DataTableHeadV2,
  DataTableHeadCellV2,
  DataTableBodyV2,
  DataTableCellV2,
  Label,
  Select,
  SelectOption,
  Pagination,
  ButtonTertiary,
  DialogBox,
  DialogBoxHeader,
  DialogBoxBody,
  Button,
} from '@americanexpress/dls-react';
import AddForm from './AddForm';
import ModalRMS from './ModalRMS';
import businessNames from '../json/businessNames.json';
import { newRecord } from './constants';

const CheckableDataTable = ({
  tableData,
  striped,
  bordered,
  small,
  checkable,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [showModal, setShowModal] = useState(false);
  const [actionType, setActionType] = useState('');
  const [editRowData, setEditRowData] = useState({});
  const [isSingleRowChecked, setisSingleRowChecked] = useState(false);
  const [disableDeleteBtn, setDisableDeleteBtn] = useState(true);
  const [currentRows,setCheckedData] = useState([]);
  
  const totalRows = tableData?.length ?? 0;
  const totalPages = Math.ceil(totalRows / itemsPerPage);
  const indexOfLastRow = currentPage * itemsPerPage;
  const indexOfFirstRow = indexOfLastRow - itemsPerPage;
  const data = tableData?.slice(indexOfFirstRow, indexOfLastRow) ?? [];
 // const [currentRows, setCheckedData] = useState(data);
// const [currentRows, setCheckedData] = useState(
//  data.dummyData||[]).map((row) => ({ ...row, checked: false })
//);
 
const [selectedRowIndex, setSelectedRowIndex] = useState(0);
  const [newRow, setNewRow] = useState({});

  const tableHeader = Object.keys(tableData?.[0] ?? []);
  let updatedRow = {};

  useEffect(() => {
    setCheckedData(data);
  }, [tableData ,currentPage, itemsPerPage]);

  useEffect(() => {
    const filteredCheckedRows = currentRows.filter((row) => Object.prototype.hasOwnProperty.call(row, 'checked') && row.checked);
    if (filteredCheckedRows.length === 1) {
      setisSingleRowChecked(true);
      setEditRowData(filteredCheckedRows[0]);
    } else {
      setisSingleRowChecked(false);
    }
    if (filteredCheckedRows.length > 0) {
      setDisableDeleteBtn(false);
    } else {
      setDisableDeleteBtn(true);
    }
  }, [currentRows]);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleRowsPerPageChange = (e) => {
    setItemsPerPage(e.target.value);
    setCurrentPage(1);
  };

  // const handleRowCheckChange = (i, { id }) => {
  //   setSelectedRowIndex(id);
  //   const newState = [
  //     ...currentRows,
  //   ];

  //   setCheckedData(() => {
  //     newState[id].checked = !currentRows[id].checked;
  //     return newState;
  //   });
  // };

  // const handleRowCheckChange = (i, { id }) => {
  //   setCheckedData((prevState) => {
  //     prevState[id].checked = !prevState[id].checked;
  //     return [...prevState];
  //   });
  // };
  // const handleRowCheckChange = (i, { id }) => {
  //   setCheckedData((prevState) => {
  //     const newState = [...prevState];
  //     newState[id] = { ...newState[id], checked: !newState[id].checked };
  //     return newState;
  //   });
  // };
  // const handleRowCheckChange = (i, { id }) => {
  //   setSelectedRowIndex(id);
  //   setCheckedData((prevRows) => {
  //     const newState = [...prevRows];
  //     if (newState[id]) {
  //       newState[id].checked = !newState[id].checked;
  //     }
  //     return newState;
  //   });
  // };
  const handleRowCheckChange = (i, { id }) => {
    setSelectedRowIndex(id);
    const newState = [...currentRows];

    setCheckedData(() => {
       newState[id] =  { 
       ...newState[id] ,
         checked: !newState[id]?.checked,
      };
      return  newState;  // Ensure that the state is always an array
    });
  };
  
  // const handleHeaderRowCheckChange = (event, {
  //   checked,
  // }) => {
  //   const newState = [
  //     ...currentRows,
  //   ];
  //   setCheckedData(() => {
  //     newState.map((rowData) => {
  //       rowData.checked = !checked;
  //       return rowData;
  //     });
  //     return newState;
  //   });
  // };

  const handleOnActionClick = (action) => {
    if (action === 'Add') {
      const addRow = Object.fromEntries(Object.keys(currentRows?.[0]).map((key) => [key, '']));
      setNewRow(addRow);
    }
    const btnAction = action !== 'save' && action !== 'close' ? action : '';
    setActionType(btnAction);

    if (action === 'save') {
      if (actionType === 'Add' || actionType === 'Copy') {
        if (actionType === 'Copy') {
          delete updatedRow.checked;
        }
        setCheckedData((current) => [...current, updatedRow]);
      } else if (actionType === 'Edit') {
        const newState = [
          ...currentRows,
        ];
        setCheckedData(() => {
          newState[selectedRowIndex] = updatedRow;
          return newState;
        });
      }
    }
    setShowModal(!showModal);
  };

  const getUpdatedRow = (row) => {
    updatedRow = row;
  };

  const handleDelete = () => {
    const finalData = currentRows.filter((row) => !row.checked);
    setCheckedData(finalData);
    setShowModal(!showModal);
  };

  const formComponent = (
    <AddForm
      tableHeaderProps={data.columnHeader}
      editData={actionType === 'Add' ? newRow : editRowData}
      actionType={actionType}
      updatedRow={getUpdatedRow}
    />
  );

  return (
    <div>
      <div className="margin-1-tb">
        <ButtonTertiary
          size="sm"
          icon={<IconPlus size="xs" title="add" />}
          onClick={() => handleOnActionClick('Add')}
        >
          Add
        </ButtonTertiary>
        <ButtonTertiary
          disabled={!isSingleRowChecked}
          size="sm"
          onClick={() => handleOnActionClick('Edit')}
          icon={<IconEdit size="xs" title="edit" />}
        >
          Edit
        </ButtonTertiary>
        <ButtonTertiary
          size="sm"
          disabled={disableDeleteBtn}
          onClick={() => handleOnActionClick('Delete')}
          icon={<IconTrash size="xs" title="delete" />}
        >
          Delete
        </ButtonTertiary>
        <ButtonTertiary
          disabled={!isSingleRowChecked}
          size="sm"
          onClick={() => handleOnActionClick('Copy')}
          icon={<IconCopy size="xs" title="copy" />}
        >
          Copy
        </ButtonTertiary>
        <ButtonTertiary
          size="sm"
          icon={<IconDownload size="xs" title="exportData" />}
        >
          Export Data
        </ButtonTertiary>
      </div>
      <div className="scroll-x">
        <DataTableV2
          id="tablev2-checkbox-instance"
          checkable={checkable}
          onRowCheckChange={handleRowCheckChange}
        //  onHeaderRowCheckChange={handleHeaderRowCheckChange}
          striped={striped}
          bordered={bordered}
          small={small}
          className="text-nowrap"
        >
          <DataTableHeadV2>
            <DataTableRowV2
              checkboxLabel="Select all"
              id="tablev2-checkbox-header-row"
            >
              {tableHeader.map((header) => (
                <DataTableHeadCellV2 style={{ border: '0.0625rem solid #d6d6d6' }} key={header}>
                  {businessNames[header]}
                </DataTableHeadCellV2>
              ))}
            </DataTableRowV2>
          </DataTableHeadV2>
          <DataTableBodyV2>
            {currentRows.map((rowData, index) => (
              <DataTableRowV2
                key={String(rowData.nReportCondId)}
                id={String(rowData.nReportCondId)} //{String(index)}
                rowIndex={index + 2}
                checked={!!rowData.checked}
                checkboxLabel={String(index)}
              >
                {Object.entries(rowData).map(([key, value]) => (
                  <DataTableCellV2 style={{ border: '0.0625rem solid #d6d6d6' }} key={key}>{String(value)}</DataTableCellV2>
                ))}
              </DataTableRowV2>
            ))}
          </DataTableBodyV2>
        </DataTableV2>
      </div>

      <div className="flex flex-align-center flex-justify-between pad-1-tb">
        <div>
          <Label htmlFor="dt-v2-p-select">Rows per page</Label>
          <Select
            id="dt-v2-p-select"
            onChange={(e) => handleRowsPerPageChange(e)}
            defaultValue={itemsPerPage}
            aria-label="rowPerPageNumber"
          >
            <SelectOption value="5">5</SelectOption>
            <SelectOption value="7">7</SelectOption>
            <SelectOption value="10">10</SelectOption>
          </Select>
        </div>
        <Pagination
          theme={{
            background: 'transparent',
          }}
          selected={currentPage}
          onChange={handlePageChange}
          total={totalPages}
        />
      </div>
      <div>
        {showModal && (
        <div>{actionType === 'Delete' ? (
          <DialogBox onClose={() => handleOnActionClick()} id="dialog-box-example">
            <DialogBoxHeader id="dialog-box-header">
              <p role="heading" aria-level="2">
                Are you sure want to delete these ids?
              </p>
            </DialogBoxHeader>
            <DialogBoxBody id="dialog-box-body">
              <div className="flex" style={{ gap: '10px' }}>
                <Button
                  styleType="primary"
                  className="margin-auto-lr margin-1-b margin-3-t"
                  onClick={handleDelete}
                >
                  Delete
                </Button>
                <Button
                  styleType="primary"
                  className="margin-auto-lr margin-1-b margin-3-t"
                  onClick={() => setShowModal(!showModal)}
                >
                  Cancel
                </Button>
              </div>
            </DialogBoxBody>
          </DialogBox>
        ) : (
          <ModalRMS
            showRef={showModal}
            handleOnActionClick={handleOnActionClick}
            title={actionType + newRecord.addRecordTitle}
            tableHeader={data.columnHeader}
          >
            {formComponent}
          </ModalRMS>
        )}
        </div>
        ) }
      </div>
    </div>
  );
};

CheckableDataTable.propTypes = {
  striped: PropTypes.bool,
  bordered: PropTypes.bool,
  small: PropTypes.bool,
  checkable: PropTypes.bool,
  tableData: PropTypes.array,
};

CheckableDataTable.defaultProps = {
  striped: false,
  bordered: true,
  small: true,
  checkable: true,
};

export default CheckableDataTable;
