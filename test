import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import AddForm from './AddForm';

describe('AddForm Component', () => {
  const mockUpdatedRow = jest.fn();

  it('renders with editData', () => {
    const editData = {
      key1: 'value1',
      key2: 'value2',
    };

    const { getByLabelText } = render(<AddForm editData={editData} updatedRow={mockUpdatedRow} />);

    expect(getByLabelText('key1')).toHaveValue('value1');
    expect(getByLabelText('key2')).toHaveValue('value2');
  });

  it('calls updatedRow when input changes', () => {
    const { getByLabelText } = render(<AddForm editData={{}} updatedRow={mockUpdatedRow} />);

    fireEvent.change(getByLabelText('someKey'), { target: { value: 'newValue' } });

    expect(mockUpdatedRow).toHaveBeenCalledWith({ someKey: 'newValue' });
  });

  it('renders labels from businessNames.json', () => {
    const businessNames = {
      key1: 'Label 1',
      key2: 'Label 2',
    };

    const editData = {
      key1: 'value1',
      key2: 'value2',
    };

    const { getByText } = render(
      <AddForm editData={editData} updatedRow={mockUpdatedRow} businessNames={businessNames} />
    );

    expect(getByText('Label 1')).toBeInTheDocument();
    expect(getByText('Label 2')).toBeInTheDocument();
  });

  it('handles undefined businessNames gracefully', () => {
    const editData = {
      key1: 'value1',
      key2: 'value2',
    };

    const { getByText } = render(<AddForm editData={editData} updatedRow={mockUpdatedRow} />);

    // Expect no errors even when businessNames is undefined
    expect(getByText('')).toBeInTheDocument();
  });

  // Add more test cases as needed...
});
