 import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import CheckableDataTable from './CheckableDataTable';

describe('CheckableDataTable Component', () => {
  const sampleTableData = [
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Doe', age: 30 },
    // Add more sample data as needed...
  ];

  it('renders table data correctly', () => {
    const { getByText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    expect(getByText('John Doe')).toBeInTheDocument();
    expect(getByText('Jane Doe')).toBeInTheDocument();
    // Add more assertions based on your actual data
  });

  it('handles row check changes correctly', () => {
    const { getByLabelText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByLabelText('0')); // Assuming the label for the checkbox is based on the row index
    expect(getByLabelText('0').checked).toBe(true);
  });

  it('handles pagination correctly', async () => {
    const { getByLabelText, getByText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByLabelText('Next'));
    await waitFor(() => {
      // Adjust expectations based on your actual pagination implementation
      expect(getByText('Next Page Data')).toBeInTheDocument();
    });
  });

  it('opens and closes the Add modal', () => {
    const { getByText, queryByText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByText('Add'));
    expect(getByText('Add New Record')).toBeInTheDocument();

    fireEvent.click(getByText('Cancel'));
    expect(queryByText('Add New Record')).toBeNull();
  });

  it('handles Edit button correctly', () => {
    const { getByText, getByLabelText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByLabelText('0'));
    fireEvent.click(getByText('Edit'));
    expect(getByText('Edit Record')).toBeInTheDocument();
  });

  it('handles Delete button correctly', () => {
    const { getByText, getByLabelText, queryByText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByLabelText('0'));
    fireEvent.click(getByText('Delete'));
    expect(getByText('Are you sure want to delete these ids?')).toBeInTheDocument();

    fireEvent.click(getByText('Cancel'));
    expect(queryByText('Are you sure want to delete these ids?')).toBeNull();
  });

  it('disables Delete button when no row is checked', () => {
    const { getByText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    expect(getByText('Delete')).toBeDisabled();
  });

  it('disables Edit button when more than one row is checked', () => {
    const { getByText, getByLabelText } = render(<CheckableDataTable tableData={sampleTableData} />);
    
    fireEvent.click(getByLabelText('0'));
    fireEvent.click(getByLabelText('1'));

    expect(getByText('Edit')).toBeDisabled();
  });

  // Add more test cases as needed...

});
