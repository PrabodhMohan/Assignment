 // ... (previous imports)

const CheckableDataTable = ({
  tableData,
  changeTableData,
  striped,
  bordered,
  small,
  checkable,
  checkedRows,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [showModal, setShowModal] = useState(false);
  const [actionType, setActionType] = useState('');
  const [editRowData, setEditRowData] = useState({});
  const [isSingleRowChecked, setIsSingleRowChecked] = useState(false);
  const [disableDeleteBtn, setDisableDeleteBtn] = useState(true);
  const [currentRows, setCurrentRows] = useState(tableData.map(row => ({ ...row, checked: false })));
  const [selectedRowIndex, setSelectedRowIndex] = useState(0);
  const [newRow, setNewRow] = useState({});
  const [currentData, setCurrentData] = useState([]);

  const tableHeader = Object.keys(tableData?.[0] ?? []);
  let updatedRow = {};

  useEffect(() => {
    setCurrentData(tableData);
  }, [tableData, currentPage, itemsPerPage]);

  useEffect(() => {
    const filteredCheckedRows = currentRows.filter(row => row.checked);
    if (filteredCheckedRows.length === 1) {
      setIsSingleRowChecked(true);
      setEditRowData(filteredCheckedRows[0]);
    } else {
      setIsSingleRowChecked(false);
    }
    setDisableDeleteBtn(filteredCheckedRows.length === 0);
  }, [currentRows]);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleRowsPerPageChange = (e) => {
    setItemsPerPage(e.target.value);
    setCurrentPage(1);
  };

  const handleRowCheckChange = (i, { id }) => {
    const updatedRows = currentRows.map((row) => {
      if (row.nReportCondId === id) {
        return { ...row, checked: !row.checked };
      }
      return row;
    });
    setCurrentRows(updatedRows);
    changeTableData(id);
  };

  const handleOnActionClick = (action) => {
    if (action === 'Add') {
      const addRow = Object.fromEntries(Object.keys(currentRows?.[0]).map((key) => [key, '']));
      setNewRow(addRow);
    }
    const btnAction = action !== 'save' && action !== 'close' ? action : '';
    setActionType(btnAction);

    if (action === 'save') {
      if (actionType === 'Add' || actionType === 'Copy') {
        if (actionType === 'Copy') {
          delete updatedRow.checked;
        }
        setCurrentRows((current) => [...current, updatedRow]);
      } else if (actionType === 'Edit') {
        const updatedRows = [...currentRows];
        updatedRows[selectedRowIndex] = updatedRow;
        setCurrentRows(updatedRows);
      }
    }
    setShowModal(!showModal);
  };

  const getUpdatedRow = (row) => {
    updatedRow = row;
  };

  const handleDelete = () => {
    const finalData = currentRows.filter((row) => !row.checked);
    setCurrentRows(finalData);
    setShowModal(!showModal);
  };

  const formComponent = (
    <AddForm
      tableHeaderProps={currentData.columnHeader}
      editData={actionType === 'Add' ? newRow : editRowData}
      actionType={actionType}
      updatedRow={getUpdatedRow}
    />
  );

  return (
    <div>
      <div className="margin-1-tb">
        {/* ... (unchanged code) */}
      </div>
      <div className="scroll-x">
        <DataTableV2
          id="tablev2-checkbox-instance"
          checkable={checkable}
          onRowCheckChange={handleRowCheckChange}
          striped={striped}
          bordered={bordered}
          small={small}
          className="text-nowrap"
        >
          <DataTableHeadV2>
            {/* ... (unchanged code) */}
          </DataTableHeadV2>
          <DataTableBodyV2>
            {currentRows.map((rowData, index) => (
              <DataTableRowV2
                key={String(rowData.nReportCondId)}
                id={String(rowData.nReportCondId)}
                rowIndex={index + 2}
                checked={rowData.checked || checkedRows.includes(rowData.nReportCondId)}
                checkboxLabel={String(rowData.nReportCondId)}
                value={String(rowData.nReportCondId)}
              >
                {/* ... (unchanged code) */}
              </DataTableRowV2>
            ))}
          </DataTableBodyV2>
        </DataTableV2>
      </div>

      {/* ... (unchanged code) */}
    </div>
  );
};

CheckableDataTable.propTypes = {
  striped: PropTypes.bool,
  bordered: PropTypes.bool,
  small: PropTypes.bool,
  checkable: PropTypes.bool,
  tableData: PropTypes.array,
  checkedRows: PropTypes.array,
  changeTableData: PropTypes.func,
};

CheckableDataTable.defaultProps = {
  striped: false,
  bordered: true,
  small: true,
  checkable: true,
};

export default CheckableDataTable;
